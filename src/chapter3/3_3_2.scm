#lang sicp

(define (front-ptr queue) (car queue))

(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item)
  (set-car! queue item))

(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (empty-queue? queue)
  (null? (front-ptr queue)))

(define (make-queue) (cons '() '()))

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair) queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair) queue))))

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else (set-front-ptr! queue (cdr (front-ptr queue)))
              queue)))

; ex 3.21

(define (print-queue queue)
  (define (print-queue-iter current-ptr)
    (if (null? current-ptr)
        (display ".")
        (begin (display (car current-ptr))
               (display " ")
               (print-queue-iter (cdr current-ptr)))))
  (print-queue-iter (front-ptr queue)))

(define q1 (make-queue))
(print-queue q1)
(newline)

(insert-queue! q1 'a)
(print-queue q1)
(newline)

(insert-queue! q1 'b)
(print-queue q1)
(newline)

(delete-queue! q1)
(print-queue q1)
(newline)

(delete-queue! q1)
(print-queue q1)
(newline)

; ex 3.22

(define (make-queue-alt)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! ptr)
      (set! front-ptr ptr))
    (define (set-rear-ptr! ptr)
      (set! rear-ptr ptr))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "FRONT called with empty queue")
          (car front-ptr)))
    (define (print)
      (define (print-iter current-ptr)
        (if (null? current-ptr)
            (begin (display ".") (newline))
            (begin (display (car current-ptr))
                   (display " ")
                   (print-iter (cdr current-ptr)))))
      (print-iter front-ptr))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (cond ((empty?) (set-front-ptr! new-pair) (set-rear-ptr! new-pair) (print))
              (else (set-cdr! rear-ptr new-pair) (set-rear-ptr! new-pair) (print)))))
    (define (delete!)
      (cond ((empty?) (error "DELETE! called with empty queue"))
            (else (set-front-ptr! (cdr front-ptr)) (print))))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty?)
            ((eq? m 'front-queue) front)
            ((eq? m 'insert-queue!) insert!)
            ((eq? m 'delete-queue!) delete!)
            (else (error "Operation Not Supported"))))
    dispatch))

(define (empty-queue-alt? queue)
  ((queue 'empty-queue?)))
(define (front-queue-alt queue)
  ((queue 'front-queue)))
(define (insert-queue-alt! queue item)
  ((queue 'insert-queue!) item))
(define (delete-queue-alt! queue)
  ((queue 'delete-queue!)))

(define q2 (make-queue-alt))
(insert-queue-alt! q2 'a)
(insert-queue-alt! q2 'b)
(delete-queue-alt! q2)
(delete-queue-alt! q2)

; ex 3.23

(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))

    (define (set-front-ptr! ptr)
      (set! front-ptr ptr))

    (define (set-rear-ptr! ptr)
      (set! rear-ptr ptr))

    (define (empty?)
      (or (null? front-ptr) (null? rear-ptr)))

    (define (front)
      (if (empty?)
          (error "FRONT called with empty deque")
          (car front-ptr)))
      
    (define (rear)
      (if (empty?)
          (error "REAR called with empty deque")
          (car rear-ptr)))
    
    (define (print)
      (define (print-iter current-ptr next-selector)
        (if (null? current-ptr)
            (begin (display ".") (newline))
            (begin (display (car current-ptr))
                   (display " ")
                   (print-iter (next-selector current-ptr) next-selector))))
      (cond ((empty?) (display "Empty list") (newline))
            ((null? front-ptr) (print-iter rear-ptr cadr))
            (else (print-iter front-ptr cddr))))
      
    (define (front-insert! item)
      (let ((new-pair (cons item (cons '() '()))))
        (cond ((empty?) (set-front-ptr! new-pair)
                        (set-rear-ptr! new-pair)
                        (print))
              (else (set-cdr! new-pair (cons '() front-ptr))
                    (set-front-ptr! new-pair)
                    (print)))))
    
    (define (rear-insert! item)
      (let ((new-pair (cons item (cons '() '()))))
        (cond ((empty?) (set-front-ptr! new-pair)
                        (set-rear-ptr! new-pair)
                        (print))
              (else (set-cdr! rear-ptr (cons (cadr rear-ptr) new-pair))
                    (set-cdr! new-pair (cons rear-ptr '()))
                    (set-rear-ptr! new-pair)
                    (print)))))
    
    (define (front-delete!)
      (cond ((empty?) (error "FRONT-DELETE! called with empty deque"))
            (else (set-front-ptr! (cddr front-ptr))
                  (cond ((not (null? front-ptr)) (set-cdr! front-ptr (cons '() (cddr front-ptr)))))
                  (print))))
    (define (rear-delete!)
      (cond ((empty?) (error "REAR-DELETE! called with empty deque"))
            (else (set-rear-ptr! (cadr rear-ptr))
                  (cond ((not (null? rear-ptr)) (set-cdr! rear-ptr (cons (cadr rear-ptr) '()))))
                  (print))))
    (define (dispatch m)
      (cond ((eq? m 'empty-deque?) empty?)
            ((eq? m 'front-deque) front)
            ((eq? m 'rear-deque) rear)
            ((eq? m 'front-insert-deque!) front-insert!)
            ((eq? m 'rear-insert-deque!) rear-insert!)
            ((eq? m 'front-delete-deque!) front-delete!)
            ((eq? m 'rear-delete-deque!) rear-delete!)
            (else (error "Operation Not Supported"))))
    dispatch))

(define (empty-deque? deque)
  ((deque 'empty-deque?)))
(define (front-deque deque)
  ((deque 'front-deque)))
(define (rear-deque deque)
  ((deque 'rear-deque)))
(define (front-insert-deque! deque item)
  ((deque 'front-insert-deque!) item))
(define (rear-insert-deque! deque item)
  ((deque 'rear-insert-deque!) item))
(define (front-delete-deque! deque)
  ((deque 'front-delete-deque!)))
(define (rear-delete-deque! deque)
  ((deque 'rear-delete-deque!)))

(define q3 (make-deque))
(front-insert-deque! q3 'a)
(rear-insert-deque! q3 'b)
(rear-insert-deque! q3 'c)
(front-delete-deque! q3)
(rear-delete-deque! q3)
(rear-delete-deque! q3)
(front-insert-deque! q3 'a)